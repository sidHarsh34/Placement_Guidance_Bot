{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mital\\\\Documents\\\\PlacementGuidanceBot\\\\frontend\\\\src\\\\Mycomponents\\\\History.js\",\n  _s = $RefreshSig$();\n// // History.js (frontend)\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const History = () => {\n//   const [conversations, setConversations] = useState([]);\n\n//   useEffect(() => {\n//     // Fetch conversation history from the server\n//     const fetchHistory = async () => {\n//       try {\n//         const response = await axios.get('/api/chat/history');\n//         setConversations(response.data.conversations);\n//       } catch (error) {\n//         console.error('Error fetching conversation history:', error);\n//       }\n//     };\n\n//     fetchHistory();\n//   }, []);\n\n//   return (\n//     <div className='history-container'>\n//       <h2>Conversation History</h2>\n//       {conversations.map((conversation, index) => (\n//         <div key={index} className='conversation'>\n//           <div className='user-query'>{conversation.query}</div>\n//           <div className='bot-response'>{conversation.response}</div>\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default History;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './History.css';\n\n//console.log('history.JS executed');\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst History = () => {\n  _s();\n  const [conversations, setConversations] = useState([]);\n  //console.log('history executed');\n  useEffect(() => {\n    console.log('useEffect executed');\n    // Fetch conversation history from the server\n    const fetchHistory = async () => {\n      try {\n        const api = axios.create({\n          baseURL: 'http://localhost:5000' // Assuming your backend API is running on port 5000\n        });\n        const response = await api.get('/chat/history');\n        //console.log('API Response:', response.data); // Check API response\n        setConversations(response.data.conversations);\n        // console.log('Conversations State:', conversations); // Check conversations state\n      } catch (error) {\n        console.error('Error fetching conversation history:', error);\n      }\n    };\n    fetchHistory();\n  }, []);\n  useEffect(() => {\n    //console.log('Conversations State:', conversations); // Check conversations state\n  }, [conversations]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"history-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Conversation History\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), conversations.map((conversation, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"conversation\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message user\",\n        children: `User: ${conversation.query}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message chatbot\",\n        children: `Chatbot: ${conversation.response}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(History, \"/f0w4pcbJJotHZ9VUnql2FeU/Vs=\");\n_c = History;\nexport default History;\nvar _c;\n$RefreshReg$(_c, \"History\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","History","_s","conversations","setConversations","console","log","fetchHistory","api","create","baseURL","response","get","data","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","conversation","index","query","_c","$RefreshReg$"],"sources":["C:/Users/mital/Documents/PlacementGuidanceBot/frontend/src/Mycomponents/History.js"],"sourcesContent":["// // History.js (frontend)\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const History = () => {\r\n//   const [conversations, setConversations] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     // Fetch conversation history from the server\r\n//     const fetchHistory = async () => {\r\n//       try {\r\n//         const response = await axios.get('/api/chat/history');\r\n//         setConversations(response.data.conversations);\r\n//       } catch (error) {\r\n//         console.error('Error fetching conversation history:', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchHistory();\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className='history-container'>\r\n//       <h2>Conversation History</h2>\r\n//       {conversations.map((conversation, index) => (\r\n//         <div key={index} className='conversation'>\r\n//           <div className='user-query'>{conversation.query}</div>\r\n//           <div className='bot-response'>{conversation.response}</div>\r\n//         </div>\r\n//       ))}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default History;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './History.css';\r\n\r\n//console.log('history.JS executed');\r\nconst History = () => {\r\n  const [conversations, setConversations] = useState([]);\r\n    //console.log('history executed');\r\n  useEffect(() => {\r\n    console.log('useEffect executed');\r\n    // Fetch conversation history from the server\r\n    const fetchHistory = async () => {\r\n      try {\r\n        const api = axios.create({\r\n          baseURL: 'http://localhost:5000', // Assuming your backend API is running on port 5000\r\n        });\r\n        const response = await api.get('/chat/history');\r\n        //console.log('API Response:', response.data); // Check API response\r\n        setConversations(response.data.conversations);\r\n       // console.log('Conversations State:', conversations); // Check conversations state\r\n      } catch (error) {\r\n        console.error('Error fetching conversation history:', error);\r\n      }\r\n    };\r\n\r\n    fetchHistory();\r\n  }, []);\r\n  useEffect(() => {\r\n    //console.log('Conversations State:', conversations); // Check conversations state\r\n  }, [conversations]);\r\n\r\n  return (\r\n    <div className='history-container'>\r\n      <h2>Conversation History</h2>\r\n      {conversations.map((conversation, index) => (\r\n        <div key={index} className='conversation'>\r\n          <div className='message user'>{`User: ${conversation.query}`}</div>\r\n          <div className='message chatbot'>{`Chatbot: ${conversation.response}`}</div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default History;\r\n"],"mappings":";;AAAA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,eAAe;;AAEtB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACpD;EACFC,SAAS,CAAC,MAAM;IACdQ,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACjC;IACA,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF,MAAMC,GAAG,GAAGV,KAAK,CAACW,MAAM,CAAC;UACvBC,OAAO,EAAE,uBAAuB,CAAE;QACpC,CAAC,CAAC;QACF,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,eAAe,CAAC;QAC/C;QACAR,gBAAgB,CAACO,QAAQ,CAACE,IAAI,CAACV,aAAa,CAAC;QAC9C;MACD,CAAC,CAAC,OAAOW,KAAK,EAAE;QACdT,OAAO,CAACS,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC9D;IACF,CAAC;IAEDP,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EACNV,SAAS,CAAC,MAAM;IACd;EAAA,CACD,EAAE,CAACM,aAAa,CAAC,CAAC;EAEnB,oBACEH,OAAA;IAAKe,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChChB,OAAA;MAAAgB,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC5BjB,aAAa,CAACkB,GAAG,CAAC,CAACC,YAAY,EAAEC,KAAK,kBACrCvB,OAAA;MAAiBe,SAAS,EAAC,cAAc;MAAAC,QAAA,gBACvChB,OAAA;QAAKe,SAAS,EAAC,cAAc;QAAAC,QAAA,EAAG,SAAQM,YAAY,CAACE,KAAM;MAAC;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACnEpB,OAAA;QAAKe,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAAG,YAAWM,YAAY,CAACX,QAAS;MAAC;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA,GAFpEG,KAAK;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGV,CACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAClB,EAAA,CArCID,OAAO;AAAAwB,EAAA,GAAPxB,OAAO;AAuCb,eAAeA,OAAO;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}